{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/GoIT/Projects/dz/next/next-module-3-4/lib/api.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport type { Note, NoteTag } from \"../types/note\";\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: \"https://notehub-public.goit.study/api\",\r\n});\r\n\r\napiClient.interceptors.request.use((config) => {\r\n  const token = process.env.NEXT_PUBLIC_NOTEHUB_TOKEN;\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport interface FetchNotesResponse {\r\n  notes: Note[];\r\n\r\n  totalPages: number;\r\n}\r\n\r\ninterface FetchNotesParams {\r\n  page?: number;\r\n  search?: string;\r\n  perPage?: number;\r\n}\r\n\r\nexport interface NewNotePayload {\r\n  title: string;\r\n  content: string;\r\n  tag: NoteTag;\r\n}\r\nexport async function fetchNotes(\r\n  page = 1,\r\n  perPage = 12,\r\n  search = \"\",\r\n  tag?: NoteTag\r\n): Promise<FetchNotesResponse> {\r\n  const response = await apiClient.get<FetchNotesResponse>(\"/notes\", {\r\n    params: { page, perPage, search, tag },\r\n  });\r\n  return response.data;\r\n}\r\n\r\nexport const createNote = async (noteData: NewNotePayload): Promise<Note> => {\r\n  const response = await apiClient.post<Note>(\"/notes\", noteData);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteNote = async (noteId: string): Promise<Note> => {\r\n  if (!noteId) {\r\n    throw new Error(\"Note ID is required for deletion\");\r\n  }\r\n  const response = await apiClient.delete<Note>(`/notes/${noteId}`);\r\n  return response.data;\r\n};\r\nexport const fetchNoteById = async (id: string): Promise<Note> => {\r\n  if (!id) {\r\n    throw new Error(\"Note ID is required\");\r\n  }\r\n  const response = await apiClient.get<Note>(`/notes/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getSingleNote = fetchNoteById;\r\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AAGA,MAAM,YAAY,gJAAK,CAAC,MAAM,CAAC;IAC7B,SAAS;AACX;AAEA,UAAU,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM;IACN,wCAAW;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT;AAmBO,eAAe,WACpB,OAAO,CAAC,EACR,UAAU,EAAE,EACZ,SAAS,EAAE,EACX,GAAa;IAEb,MAAM,WAAW,MAAM,UAAU,GAAG,CAAqB,UAAU;QACjE,QAAQ;YAAE;YAAM;YAAS;YAAQ;QAAI;IACvC;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAW,MAAM,UAAU,IAAI,CAAO,UAAU;IACtD,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,aAAa,OAAO;IAC/B,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,MAAM,WAAW,MAAM,UAAU,MAAM,CAAO,CAAC,OAAO,EAAE,QAAQ;IAChE,OAAO,SAAS,IAAI;AACtB;AACO,MAAM,gBAAgB,OAAO;IAClC,IAAI,CAAC,IAAI;QACP,MAAM,IAAI,MAAM;IAClB;IACA,MAAM,WAAW,MAAM,UAAU,GAAG,CAAO,CAAC,OAAO,EAAE,IAAI;IACzD,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,gBAAgB","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///C:/GoIT/Projects/dz/next/next-module-3-4/app/notes/%5Bid%5D/NoteDetails.client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/notes/[id]/NoteDetails.client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/notes/[id]/NoteDetails.client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAyS,GACtU,uEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///C:/GoIT/Projects/dz/next/next-module-3-4/app/notes/%5Bid%5D/NoteDetails.client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/notes/[id]/NoteDetails.client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/notes/[id]/NoteDetails.client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///C:/GoIT/Projects/dz/next/next-module-3-4/app/notes/%5Bid%5D/page.tsx"],"sourcesContent":["import { fetchNoteById } from \"@/lib/api\";\r\nimport {\r\n  dehydrate,\r\n  HydrationBoundary,\r\n  QueryClient,\r\n} from \"@tanstack/react-query\";\r\nimport NoteDetailsClient from \"./NoteDetails.client\";\r\n\r\ninterface NoteDetailsProps {\r\n  params: Promise<{ id: string }>;\r\n}\r\n\r\nexport async function generateMetadata({ params }: NoteDetailsProps) {\r\n  const { id } = await params;\r\n  const note = await fetchNoteById(id);\r\n  return {\r\n    title: `Note: ${note.title}`,\r\n    description: note.content.slice(0, 30),\r\n    openGraph: {\r\n      title: `Note: ${note.title}`,\r\n      description: note.content.slice(0, 100),\r\n      url: `https://notehub.com/notes/${id}`,\r\n      siteName: \"NoteHub\",\r\n      images: [\r\n        {\r\n          url: \"https://ac.goit.global/fullstack/react/og-meta.jpg\",\r\n          width: 1200,\r\n          height: 630,\r\n          alt: note.title,\r\n        },\r\n      ],\r\n      type: \"article\",\r\n    },\r\n  };\r\n}\r\nconst NoteDetails = async ({ params }: NoteDetailsProps) => {\r\n  const { id } = await params;\r\n  const queryClient = new QueryClient();\r\n\r\n  await queryClient.prefetchQuery({\r\n    queryKey: [\"note\", id],\r\n    queryFn: () => fetchNoteById(id),\r\n  });\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <NoteDetailsClient id={id} />\r\n    </HydrationBoundary>\r\n  );\r\n};\r\nexport default NoteDetails;\r\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAAA;AAAA;AAKA;;;;;AAMO,eAAe,iBAAiB,EAAE,MAAM,EAAoB;IACjE,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,OAAO,MAAM,IAAA,2HAAa,EAAC;IACjC,OAAO;QACL,OAAO,CAAC,MAAM,EAAE,KAAK,KAAK,EAAE;QAC5B,aAAa,KAAK,OAAO,CAAC,KAAK,CAAC,GAAG;QACnC,WAAW;YACT,OAAO,CAAC,MAAM,EAAE,KAAK,KAAK,EAAE;YAC5B,aAAa,KAAK,OAAO,CAAC,KAAK,CAAC,GAAG;YACnC,KAAK,CAAC,0BAA0B,EAAE,IAAI;YACtC,UAAU;YACV,QAAQ;gBACN;oBACE,KAAK;oBACL,OAAO;oBACP,QAAQ;oBACR,KAAK,KAAK,KAAK;gBACjB;aACD;YACD,MAAM;QACR;IACF;AACF;AACA,MAAM,cAAc,OAAO,EAAE,MAAM,EAAoB;IACrD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,cAAc,IAAI,4LAAW;IAEnC,MAAM,YAAY,aAAa,CAAC;QAC9B,UAAU;YAAC;YAAQ;SAAG;QACtB,SAAS,IAAM,IAAA,2HAAa,EAAC;IAC/B;IAEA,qBACE,8OAAC,yMAAiB;QAAC,OAAO,IAAA,wLAAS,EAAC;kBAClC,cAAA,8OAAC,2JAAiB;YAAC,IAAI;;;;;;;;;;;AAG7B;uCACe","debugId":null}}]
}